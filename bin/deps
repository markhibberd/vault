#!/usr/bin/env runhaskell

module Main
(
  main
) where

import Control.Exception
import System.Environment
import System.FilePath
import System.Directory
import System.Exit
import System.Process
import Data.Maybe

scalazHome ::
  IO FilePath
scalazHome =
  do e <- getEnvironment
     h <- getHomeDirectory
     return $ (h </> "work" </> "scalaz") `fromMaybe` ("SCALAZ_HOME" `lookup` e)

inScalazHome ::
  (FilePath -> IO a)
  -> IO a
inScalazHome a =
  scalazHome >>= chdir a

scalazJars ::
  [FilePath]
scalazJars =
  fmap
  (\p -> "core" </> "target" </> "scala_2.8.1" </> p)
  [
    "scalaz-core_2.8.1-5.1-SNAPSHOT.jar"
  , "scalaz-core_2.8.1-5.1-SNAPSHOT-test-sources.jar"
  , "scalaz-core_2.8.1-5.1-SNAPSHOT-sources.jar"
  , "scalaz-core_2.8.1-5.1-SNAPSHOT-docs.jar"
  , "scalaz-core_2.8.1-5.1-SNAPSHOT-test.jar"
  ]  
  
main ::
  IO ()
main = 
  inScalazHome $ \c ->
    do x <- system "./sbt package-all"
       if x == ExitSuccess
         then mapM_ (\p -> copyFile p (c </> "lib" </> "run" </> "scalaz" </> takeFileName p)) scalazJars
         else exitWith x
  
  
-- belongs in utility-tm

-- | Change to the given directory, then execute the given action using the original directory, then change back to the original directory.
chdir ::
  (FilePath -> IO a)  -- ^ The action to execute in the given directory.
  -> FilePath -- ^ The directory to change to.
  -> IO a  -- ^ The result of executing the given action.
chdir a d =
    bracket getCurrentDirectory setCurrentDirectory (\c -> setCurrentDirectory d >> a c)
